package module

import (
	"runtime/debug"

	"github.com/pkg/errors"
	"google.golang.org/protobuf/compiler/protogen"
)

func Run() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		defer func() {
			if xx := recover(); xx != nil {
				gen.Error(errors.Errorf("panic: %+v, %s", xx, debug.Stack()))
			}
		}()

		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}

			if err := generateFile(gen, f); err != nil {
				gen.Error(err)
			}
		}

		return nil
	})
}

// generateFile generates a _zap.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) error {
	g := gen.NewGeneratedFile(file.GeneratedFilenamePrefix+".pb.zap.go", file.GoImportPath)
	g.P("// Code generated by protoc-gen-zap")
	g.P("// source: ", file.Desc.Path())
	g.P("// DO NOT EDIT!!!")
	g.P("package " + file.GoPackageName)
	g.P()

	if len(file.Messages) == 0 {
		g.Skip()
		return nil
	}

	if err := generateMessages(g, file.Messages); err != nil {
		return err
	}

	return nil
}

func generateMessages(g *protogen.GeneratedFile, messages []*protogen.Message) error {
	for _, message := range messages {
		if message.Desc.IsMapEntry() {
			continue
		}

		if err := generateMessage(g, message); err != nil {
			return err
		}

		if err := generateMessages(g, message.Messages); err != nil {
			return err
		}
	}

	return nil
}
